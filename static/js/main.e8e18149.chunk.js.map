{"version":3,"sources":["components/Section/Section.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Loader/Loader.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["Section","title","children","className","defaultProps","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","getIsLoading","state","contacts","loading","getFilterValue","filter","getContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","INITIAL_STATE","number","ContactForm","handelChange","target","value","setState","handelSubmit","e","preventDefault","includesContact","props","find","onSubmit","reset","alert","this","type","pattern","required","onChange","Component","connect","dispatch","a","actions","post","data","addContact","ContactList","onDeleteContact","map","id","onClick","delete","status","removeContact","Filter","reactLoader","color","secondaryColor","height","width","App","fetchContacts","isLoading","get","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8e18149.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Section.scss\";\n\nconst Section = ({ title, children }) => (\n  <section className=\"section\">\n    <div className=\"container\">\n      <h2 className=\"section__title\">{title}</h2>\n      {children}\n    </div>\n  </section>\n);\n\nSection.defaultProps = {\n  children: null,\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/AddContactRequest');\nexport const addContactSuccess = createAction('contacts/AddContactSuccess');\nexport const addContactError = createAction('contacts/AddContactError');\n\nexport const removeContactRequest = createAction('contacts/RemoveContactRequest');\nexport const removeContactSuccess = createAction('contacts/RemoveContactSuccess');\nexport const removeContactError = createAction('contacts/RemoveContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\nimport * as actions from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:8888/';\n\nexport const fetchContactsRequest = () => async dispatch => {\n  dispatch(actions.fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(actions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(actions.removeContactError(error));\n  }\n\n  //   axios\n  //     .get('/contacts')\n  //     .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n  //     .catch(error => actions.fetchContactsError(error));\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  const contact = { name, number };\n\n  dispatch(actions.addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(actions.addContactSuccess(data));\n  } catch (error) {\n    dispatch(actions.addContactError(error));\n  }\n\n  //   axios\n  //     .post('/contacts', contact)\n  //     .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n  //     .catch(error => dispatch(actions.addContactError(error)));\n};\n\nexport const removeContact = id => async dispatch => {\n  dispatch(actions.removeContactRequest());\n\n  try {\n    const response = await axios.delete(`/contacts/${id}`);\n\n    if (response.status === 200) {\n      dispatch(actions.removeContactSuccess(id));\n    }\n  } catch (error) {\n    dispatch(actions.removeContactError(error));\n  }\n\n  //   axios\n  //     .delete(`/contacts/${id}`)\n  //     .then(() => dispatch(actions.removeContactSuccess(id)))\n  //     .catch(error => dispatch(actions.removeContactError(error)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\nexport const getIsLoading = state => state.contacts.loading;\nexport const getFilterValue = state => state.contacts.filter;\nexport const getContacts = state => state.contacts.items;\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilterValue],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  },\n);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './ContactForm.scss';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nclass ContactForm extends Component {\n  state = {\n    ...INITIAL_STATE,\n  };\n\n  handelChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handelSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n    const includesContact = contacts.find(contact => contact.name === name);\n\n    if (!includesContact) {\n      this.props.onSubmit(name, number);\n      this.reset();\n      return;\n    }\n\n    alert(`${includesContact.name} is already in contacts`);\n  };\n\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className=\"form\" onSubmit={this.handelSubmit}>\n        <label className=\"form__label\">\n          Name\n          <input\n            className=\"form__input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handelChange}\n          />\n        </label>\n        <label className=\"form__label\">\n          Number\n          <input\n            className=\"form__input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handelChange}\n          />\n        </label>\n        <button className=\"form__button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.defaultProps = {\n  onSubmit: () => null,\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    }),\n  ).isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './ContactList.scss';\nimport { removeContact } from '../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className=\"contacts__list\">\n    {contacts.map(({ id, name, number }) => (\n      <li className=\"contacts__item\" key={id}>\n        <p className=\"contact__info\">\n          {name}: {number}\n        </p>\n        <button\n          className=\"contact__button--delete\"\n          type=\"button\"\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.defaultProps = {\n  onDeleteContact: () => null,\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(removeContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './Filter.scss';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport { getFilterValue } from '../../redux/contacts/contacts-selectors';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"filter__label\">\n    Find contacts by name\n    <input className=\"filter__input\" type=\"text\" value={value} onChange={onChange}></input>\n  </label>\n);\n\nFilter.defaultProps = {\n  onChange: () => null,\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilterValue(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import './Loader.scss';\nimport Loader from 'react-loader-spinner';\n\nconst reactLoader = () => (\n  <div className=\"Loader\">\n    <Loader type=\"MutatingDots\" color=\"#44bec7\" secondaryColor=\"#4e777a\" height={100} width={100} />\n  </div>\n);\n\nexport default reactLoader;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Section from './components/Section';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport Loader from './components/Loader';\nimport { fetchContactsRequest } from './redux/contacts/contacts-operations';\nimport { getIsLoading } from './redux/contacts/contacts-selectors';\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <div>\n        <Section title=\"Phonebook\">\n          {this.props.isLoading && <Loader />}\n          <ContactForm />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter />\n          <ContactList />\n        </Section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoading: getIsLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(fetchContactsRequest()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './contacts-actions';\n\nconst items = createReducer([], {\n  [actions.fetchContactsSuccess]: (_, { payload }) => payload,\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\n  [actions.removeContactSuccess]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [actions.fetchContactsRequest]: () => true,\n  [actions.fetchContactsSuccess]: () => false,\n  [actions.fetchContactsError]: () => false,\n  [actions.addContactRequest]: () => true,\n  [actions.addContactSuccess]: () => false,\n  [actions.addContactError]: () => false,\n  [actions.removeContactRequest]: () => true,\n  [actions.removeContactSuccess]: () => false,\n  [actions.removeContactError]: () => false,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  // persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\n\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from \"redux-persist/integration/react\";\nimport 'modern-normalize/modern-normalize.css';\n\nimport App from './App';\nimport store from './redux/store';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}